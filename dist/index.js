!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(e=>(()=>{"use strict";var t={931:(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r(639),o=r.n(n),i=["styles"];function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}const u=function(e){e.styles;var t=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,i);return o().createElement("svg",a({width:"44",height:"44",xmlns:"http://www.w3.org/2000/svg",stroke:"#fff"},t),o().createElement("g",{fill:"none",fillRule:"evenodd",strokeWidth:"2"},o().createElement("circle",{cx:"22",cy:"22",r:"1"},o().createElement("animate",{attributeName:"r",begin:"0s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),o().createElement("animate",{attributeName:"stroke-opacity",begin:"0s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"})),o().createElement("circle",{cx:"22",cy:"22",r:"1"},o().createElement("animate",{attributeName:"r",begin:"-0.9s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),o().createElement("animate",{attributeName:"stroke-opacity",begin:"-0.9s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"}))))}},120:function(e,t,r){function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(639)),f=l(r(267)),s=l(r(486)),d=l(r(552)),y=l(r(832)),p=l(r(913));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],o=n(c.useState(!0),2),i=o[0],a=o[1],u=n(c.useState(!0),2),l=u[0],m=u[1],v=n(c.useState(0),2),b=v[0],g=v[1],_=c.useRef(),O=c.useRef(!0),j=c.useContext(f.default),w=j.loop,S=j.currentIndex,x=j.isPaused,M=j.keyboardNavigation,E=j.preventDefault,P=j.storyContainerStyles,A=void 0===P?{}:P,C=c.useContext(s.default).stories;c.useEffect((function(){"number"==typeof S&&(S>=0&&S<C.length?k((function(){return S})):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",S))}),[S]),c.useEffect((function(){"boolean"==typeof x&&a(x)}),[x]),c.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof M&&M)return document.addEventListener("keydown",I),function(){document.removeEventListener("keydown",I)}}),[M]),c.useEffect((function(){return function(){O.current=!1}}),[]);var I=function(e){"ArrowLeft"===e.key?T():"ArrowRight"===e.key&&R()},D=function(e,t){a("pause"===e),m(!!t)},k=function(e){r(e),D("pause",!0)},T=function(){k((function(e){return e>0?e-1:e}))},R=function(){O.current&&(w?z():B())},z=function(){k((function(e){return(e+1)%C.length}))},B=function(){k((function(e){return e<C.length-1?e+1:e}))},W=function(e){e.preventDefault(),_.current=setTimeout((function(){D("pause")}),200)},U=function(e){return function(t){t.preventDefault(),_.current&&clearTimeout(_.current),i?D("play"):"next"===e?R():T()}};return c.default.createElement("div",{style:Object.assign(Object.assign({},A),h.container)},c.default.createElement(d.default.Provider,{value:{bufferAction:l,videoDuration:b,currentId:t,pause:i,next:R}},c.default.createElement(p.default,null)),c.default.createElement(y.default,{action:D,bufferAction:l,playState:i,story:C[t],getVideoDuration:function(e){g(1e3*e)}}),!E&&c.default.createElement("div",{style:h.overlay},c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:W,onTouchEnd:U("previous"),onMouseDown:W,onMouseUp:U("previous")}),c.default.createElement("div",{style:{width:"50%",zIndex:999},onTouchStart:W,onTouchEnd:U("next"),onMouseDown:W,onMouseUp:U("next")})))};var h={container:{display:"flex",flexDirection:"column",background:"transparent",position:"relative",width:"100vw",height:"100%","@media (min-width: 480px)":{width:375,maxHeight:667}},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},463:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(639)),i={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=function(e){var t=e.profileImage,r=e.heading,n=e.subheading;return o.default.createElement("div",{style:i.main},t&&o.default.createElement("img",{style:i.img,src:t}),o.default.createElement("span",{style:i.text},o.default.createElement("p",{style:i.heading},r),o.default.createElement("p",{style:i.subheading},n)))}},911:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(639)),l=a(r(424)),c=a(r(552));t.default=function(e){var t=u.useContext(c.default),r=t.bufferAction,n=t.pause,o=e.width,i=e.active;return u.default.createElement(l.default,{width:o,pause:n,bufferAction:r},u.default.createElement("div",{style:Object.assign(Object.assign({},function(t){switch(t.active){case 2:return{width:"100%"};case 1:return{transform:"scaleX(".concat(e.count/100,")")};default:return{width:0}}}({active:i})),f.inner)}))};var f={inner:{background:"#A3A3A3",height:"100%",maxWidth:"100%",borderRadius:2,transformOrigin:"center left",border:"none",WebkitBackfaceVisibility:"hidden",MozBackfaceVisibility:"hidden",msBackfaceVisibility:"hidden",backfaceVisibility:"hidden",WebkitPerspective:1e3,MozPerspective:1e3,msPerspective:1e3,perspective:1e3}}},913:function(e,t,r){function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(r(639)),c=u(r(911)),f=u(r(552)),s=u(r(267)),d=u(r(486));t.default=function(){var e,t,r=(e=l.useState(0),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=l.useContext(f.default),u=a.currentId,p=a.next,h=a.videoDuration,m=a.pause,v=l.useContext(s.default),b=v.defaultInterval,g=v.onStoryEnd,_=v.onStoryStart,O=v.onAllStoriesEnd,j=l.useContext(d.default).stories;l.useEffect((function(){i(0)}),[u,j]),l.useEffect((function(){return m||(w.current=requestAnimationFrame(x)),function(){cancelAnimationFrame(w.current)}}),[u,m]);var w=l.useRef(),S=o,x=function e(){0===S&&M(),i((function(e){var t=A();return S=e+100/(t/1e3*60),e+100/(t/1e3*60)})),S<100?w.current=requestAnimationFrame(e):(E(),u===j.length-1&&P(),cancelAnimationFrame(w.current),p())},M=function(){_&&_(u,j[u])},E=function(){g&&g(u,j[u])},P=function(){O&&O(u,j)},A=function(){return"video"===j[u].type?h:"number"==typeof j[u].duration?j[u].duration:b};return l.default.createElement("div",{style:y.progressArr},j.map((function(e,t){return l.default.createElement(c.default,{key:t,count:o,width:1/j.length,active:t===u?1:t<u?2:0})})))};var y={progressArr:{display:"flex",justifyContent:"center",maxWidth:"100%",flexWrap:"row",position:"absolute",width:"91%",padding:16,alignSelf:"center",zIndex:99}}},424:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(639)),i={height:2,maxWidth:"100%",background:"#E0E0E0",margin:2,borderRadius:2,transition:"opacity 400ms ease-in-out"};t.default=function(e){return o.default.createElement("div",{style:Object.assign(Object.assign({},i),(t=e,r=t.width,n=t.pause,a=t.bufferAction,{width:"".concat(100*r,"%"),opacity:n&&!a?0:1}))},e.children);var t,r,n,a}},771:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(639)),l=a(r(267));t.default=function(e){var t=e.seeMoreContent,r=e.customCollapsed,n=u.useContext(l.default).keyboardNavigation;u.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof n&&n)return document.addEventListener("keydown",o),function(){document.removeEventListener("keydown",o)}}),[n]);var o=function(t){"ArrowUp"===t.key?(t.preventDefault(),e.toggleMore(!0)):"ArrowDown"!==t.key&&"Escape"!==t.key||(t.preventDefault(),e.toggleMore(!1))};return e.showContent?u.default.createElement("div",{style:c.seeMoreExpanded},u.default.createElement(t,{close:function(){return e.toggleMore(!1)}})):r?u.default.createElement(r,{action:e.action,toggleMore:e.toggleMore}):u.default.createElement("div",{style:c.seeMore,onClick:function(t){t.preventDefault(),t.stopPropagation(),e.toggleMore(!0)}},u.default.createElement("span",{style:c.seeMoreIcon},"⌃"),u.default.createElement("span",{style:c.seeMoreText},"See more"))};var c={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},353:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(639)),i=n(r(931));t.default=function(){return o.default.createElement(i.default,null)}},832:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(639)),l=a(r(267)),c={display:"flex",position:"relative",overflow:"hidden",alignItems:"center"};t.default=function(e){var t,r,n=u.useContext(l.default),o=n.width,i=n.height,a=n.loader,f=n.header,s=n.storyStyles;return u.default.createElement("div",{style:Object.assign(Object.assign({},c),{width:o,height:i})},(t=e.story.content,r={width:o,height:i,loader:a,header:f,storyStyles:s},u.default.createElement(t,{action:e.action,isPaused:e.playState,story:e.story,config:r,messageHandler:function(t,r){if("UPDATE_VIDEO_DURATION"===t)return e.getVideoDuration(r.duration),{ack:"OK"}}})))}},267:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(639));t.initialContext={defaultInterval:4e3,width:360,height:640};var i=o.default.createContext(t.initialContext);t.default=i},552:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(639));t.default=o.default.createContext({currentId:0,videoDuration:0,bufferAction:!1,pause:!1,next:function(){}})},486:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(639));t.initialContext={stories:[]};var i=o.default.createContext(t.initialContext);t.default=i},370:function(e,t,r){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WithSeeMore=t.WithHeader=void 0;var c=u(r(639)),f=l(r(120)),s=l(r(267)),d=l(r(486)),y=r(371),p=r(942),h=l(r(803)),m=l(r(763)),v=function(e){var t,r,n=e.renderers?e.renderers.concat(p.renderers):p.renderers,i={width:e.width,height:e.height,loader:e.loader,header:e.header,storyContainerStyles:e.storyContainerStyles,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd,keyboardNavigation:e.keyboardNavigation,preventDefault:e.preventDefault},a=(t=c.useState({stories:b(e.stories,n)}),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=a[0],l=a[1];return c.useEffect((function(){l({stories:b(e.stories,n)})}),[e.stories,e.renderers]),c.default.createElement(s.default.Provider,{value:i},c.default.createElement(d.default.Provider,{value:u},c.default.createElement(f.default,null)))},b=function(e,t){return e.map((function(e){var r={};"string"==typeof e?(r.url=e,r.type="image"):"object"===n(e)&&(r=Object.assign(r,e));var o=y.getRenderer(r,t);return r.originalContent=r.content,r.content=o,r}))};v.defaultProps={width:360,height:640,defaultInterval:4e3},t.WithHeader=h.default,t.WithSeeMore=m.default,t.default=v},350:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(639));t.renderer=function(e){a.useEffect((function(){e.action("play")}),[e.story]);var t=e.story.originalContent;return a.createElement(t,Object.assign({},e))},t.tester=function(e){return{condition:!!e.content,priority:2}},t.default={renderer:t.renderer,tester:t.tester}},248:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(639));t.renderer=function(e){var t=e.story,r=e.action;return a.useEffect((function(){r("play")}),[t]),a.createElement("div",{style:u.storyContent},a.createElement("p",{style:u.text},"This story could not be loaded."))};var u={storyContent:{width:"100%",maxHeight:"100%",margin:"auto"},text:{textAlign:"center",color:"white",width:"90%",margin:"auto"}};t.tester=function(){return{condition:!0,priority:1}},t.default={renderer:t.renderer,tester:t.tester}},209:function(e,t,r){function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var l=a(r(639)),c=u(r(353)),f=u(r(803)),s=u(r(763));t.renderer=function(e){var t,r,o=e.story,i=e.action,a=(e.isPaused,e.config),u=(t=l.useState(!1),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),y=u[0],p=u[1],h=a.width,m=a.height,v=a.loader,b=a.storyStyles,g=Object.assign(Object.assign({},d.storyContent),b||{});return l.createElement(f.default,{story:o,globalHeader:a.header},l.createElement(s.default,{story:o,action:i},l.createElement("div",null,l.createElement("img",{style:g,src:o.url,onLoad:function(){p(!0),i("play")}}),!y&&l.createElement("div",{style:{width:h,height:m,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},v||l.createElement(c.default,null)))))};var d={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.tester=function(e){return{condition:!(e.content||e.type&&"image"!==e.type),priority:2}},t.default={renderer:t.renderer,tester:t.tester}},544:function(e,t,r){function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(639)),f=l(r(353)),s=l(r(803)),d=l(r(763));t.renderer=function(e){var t=e.story,r=e.action,o=e.isPaused,i=e.config,a=e.messageHandler,u=n(c.useState(!1),2),l=u[0],p=u[1],h=n(c.useState(!1),2),m=h[0],v=h[1],b=i.width,g=i.height,_=i.loader,O=i.storyStyles,j=Object.assign(Object.assign({},y.storyContent),O||{}),w=c.useRef(null);return c.useEffect((function(){w.current&&(o?w.current.pause():w.current.play().catch((function(){})))}),[o]),c.createElement(s.default,{story:t,globalHeader:i.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",{style:y.videoContainer},c.createElement("video",{ref:w,style:j,src:t.url,controls:!1,onLoadedData:function(){a("UPDATE_VIDEO_DURATION",{duration:w.current.duration}),p(!0),w.current.play().then((function(){r("play")})).catch((function(){v(!0),w.current.play().finally((function(){r("play")}))}))},playsInline:!0,onWaiting:function(){r("pause",!0)},onPlaying:function(){r("play",!0)},muted:m,autoPlay:!0,"webkit-playsinline":"true"}),!l&&c.createElement("div",{style:{width:b,height:g,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},_||c.createElement(f.default,null)))))};var y={storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"},videoContainer:{display:"flex",alignItems:"center",justifyContent:"center"}};t.tester=function(e){return{condition:"video"===e.type,priority:2}},t.default={renderer:t.renderer,tester:t.tester}},942:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderers=void 0;var o=n(r(209)),i=n(r(544)),a=n(r(248)),u=n(r(350));t.renderers=[o.default,i.default,u.default,a.default]},803:function(e,t,r){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(639)),a=o(r(463));t.default=function(e){var t=e.story,r=e.globalHeader,o=e.children;return i.default.createElement(i.default.Fragment,null,o,t.header&&i.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:19}},"object"===n(t)?r?r(t.header):i.default.createElement(a.default,{heading:t.header.heading,subheading:t.header.subheading,profileImage:t.header.profileImage}):null))}},763:function(e,t,r){function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(r(639)),c=u(r(771));t.default=function(e){var t,r,o=e.story,i=e.action,a=e.customCollapsed,u=e.children,f=(t=l.useState(!1),r=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=f[0],d=f[1],y=c.default;return l.default.createElement(l.default.Fragment,null,u,o.seeMore&&l.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:s?"unset":0,zIndex:9999,width:"100%",height:s?"100%":"auto"}},l.default.createElement(y,{action:i,toggleMore:function(e){i(e?"pause":"play"),d(e)},showContent:s,seeMoreContent:o.seeMore,customCollapsed:a||o.seeMoreCollapsed})))}},371:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRenderer=void 0,t.getRenderer=function(e,t){var r=t.map((function(t){return Object.assign(Object.assign({},t),{testerResult:t.tester(e)})})).filter((function(e){return e.testerResult.condition}));return r.sort((function(e,t){return t.testerResult.priority-e.testerResult.priority})),r[0].renderer}},639:t=>{t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}return n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(370)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,